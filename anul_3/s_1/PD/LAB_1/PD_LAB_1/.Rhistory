print(dataF)
# Transpunem datele din "dataF" folosind funcția "t" și le stocăm în "transposed_data".
transposed_data <- t(dataF)
# Generăm un grafic cu puncte (scatter plot) pentru datele transpuse folosind funcția "plot".
# Setăm "type = "p"" pentru a specifica tipul de grafic (cu puncte), iar "main" setează titlul graficului.
plot(transposed_data, type = "p", main = "Scatter Plot fisier data.txt")
# Adăugăm coordonatele deasupra fiecărui punct utilizând o buclă "for".
for (i in 1:nrow(transposed_data)) {
text(transposed_data[i, 1], transposed_data[i, 2], labels = paste("(", transposed_data[i, 1], ",", transposed_data[i, 2], ")"))
}
}
# Specificăm calea către fișierul de date pe care dorim să-l procesăm și să-l afișăm sub formă de grafic cu puncte și coordonate.
file_path <- "D:/UNIVER/ANUL_3/PD/LAB_1/PD_LAB_1/data.txt"
# Apelăm funcția "process_data_and_plot" cu calea către fișierul de date ca argument.
process_data_and_plot(file_path)
# Definim o funcție numită "process_data_and_plot" care primește un singur argument, "file_path", reprezentând calea către fișierul de date.
process_data_and_plot <- function(file_path) {
# Citim datele din fișierul specificat într-un obiect de tip data frame numit "dataF".
dataF <- read.table(file = file_path, header = TRUE)
# Afișăm tabelul de date citit.
print(dataF)
# Transpunem datele din "dataF" folosind funcția "t" și le stocăm în "transposed_data".
transposed_data <- t(dataF)
# Generăm un grafic cu puncte (scatter plot) pentru datele transpuse folosind funcția "plot".
# Setăm "type = "p"" pentru a specifica tipul de grafic (cu puncte), iar "main" setează titlul graficului.
plot(transposed_data, type = "p", main = "Scatter Plot fisier data.txt")
# Adăugăm coordonatele deasupra fiecărui punct utilizând o buclă "for".
for (i in 1:nrow(transposed_data)) {
text(transposed_data[i, 1], transposed_data[i, 2], labels = paste("(", transposed_data[i, 1], ",", transposed_data[i, 2], ")"))
}
}
# Specificăm calea către fișierul de date pe care dorim să-l procesăm și să-l afișăm sub formă de grafic cu puncte și coordonate.
file_path <- "D:/UNIVER/ANUL_3/PD/LAB_1/PD_LAB_1/data.txt"
# Apelăm funcția "process_data_and_plot" cu calea către fișierul de date ca argument.
process_data_and_plot(file_path)
# Definim o funcție numită "process_data_and_plot" care primește un singur argument, "file_path", reprezentând calea către fișierul de date.
process_data_and_plot <- function(file_path) {
# Citim datele din fișierul specificat într-un obiect de tip data frame numit "dataF".
dataF <- read.table(file = file_path, header = TRUE)
# Afișăm tabelul de date citit.
print(dataF)
# Transpunem datele din "dataF" folosind funcția "t" și le stocăm în "transposed_data".
transposed_data <- t(dataF)
# Generăm un grafic cu puncte (scatter plot) pentru datele transpuse folosind funcția "plot".
# Setăm "type = "p"" pentru a specifica tipul de grafic (cu puncte), iar "main" setează titlul graficului.
plot(transposed_data, type = "p", main = "Scatter Plot fisier data.txt")
# Adăugăm coordonatele deasupra fiecărui punct utilizând o buclă "for".
for (i in 1:nrow(transposed_data)) {
text(transposed_data[i, 1], transposed_data[i, 2], labels = paste("(", transposed_data[i, 1], ",", transposed_data[i, 2], ")"))
}
}
# Specificăm calea către fișierul de date pe care dorim să-l procesăm și să-l afișăm sub formă de grafic cu puncte și coordonate.
file_path <- "D:/UNIVER/ANUL_3/PD/LAB_1/PD_LAB_1/data.txt"
# Apelăm funcția "process_data_and_plot" cu calea către fișierul de date ca argument.
process_data_and_plot(file_path)
# Definim o funcție numită "process_data_and_plot" care primește un singur argument, "file_path", reprezentând calea către fișierul de date.
process_data_and_plot <- function(file_path) {
# Citim datele din fișierul specificat într-un obiect de tip data frame numit "dataF".
dataF <- read.table(file = file_path, header = TRUE)
# Afișăm tabelul de date citit.
print(dataF)
# Transpunem datele din "dataF" folosind funcția "t" și le stocăm în "transposed_data".
transposed_data <- t(dataF)
# Generăm un grafic cu puncte (scatter plot) pentru datele transpuse folosind funcția "plot".
# Setăm "type = "p"" pentru a specifica tipul de grafic (cu puncte), iar "main" setează titlul graficului.
plot(transposed_data, type = "p", main = "Scatter Plot fisier data.txt")
# Adăugăm coordonatele deasupra fiecărui punct utilizând o buclă "for".
for (i in 1:nrow(transposed_data) + 1) {
text(transposed_data[i, 1], transposed_data[i, 2], labels = paste("(", transposed_data[i, 1], ",", transposed_data[i, 2], ")"))
}
}
# Specificăm calea către fișierul de date pe care dorim să-l procesăm și să-l afișăm sub formă de grafic cu puncte și coordonate.
file_path <- "D:/UNIVER/ANUL_3/PD/LAB_1/PD_LAB_1/data.txt"
# Apelăm funcția "process_data_and_plot" cu calea către fișierul de date ca argument.
process_data_and_plot(file_path)
# Definim o funcție numită "process_data_and_plot" care primește un singur argument, "file_path", reprezentând calea către fișierul de date.
process_data_and_plot <- function(file_path) {
# Citim datele din fișierul specificat într-un obiect de tip data frame numit "dataF".
dataF <- read.table(file = file_path, header = TRUE)
# Afișăm tabelul de date citit.
print(dataF)
# Transpunem datele din "dataF" folosind funcția "t" și le stocăm în "transposed_data".
transposed_data <- t(dataF)
# Generăm un grafic cu puncte (scatter plot) pentru datele transpuse folosind funcția "plot".
# Setăm "type = "p"" pentru a specifica tipul de grafic (cu puncte), iar "main" setează titlul graficului.
plot(transposed_data, type = "p", main = "Scatter Plot fisier data.txt")
# Adăugăm coordonatele deasupra fiecărui punct utilizând o buclă "for".
for (i in 1:nrow(transposed_data) + 1) {
text(transposed_data[i, 1], transposed_data[i, 2], labels = paste("(", transposed_data[i, 1], ",", transposed_data[i, 2], ")"))
}
}
# Specificăm calea către fișierul de date pe care dorim să-l procesăm și să-l afișăm sub formă de grafic cu puncte și coordonate.
file_path <- "D:/UNIVER/ANUL_3/PD/LAB_1/PD_LAB_1/data.txt"
# Apelăm funcția "process_data_and_plot" cu calea către fișierul de date ca argument.
process_data_and_plot(file_path)
# Definim o funcție numită "process_data_and_plot" care primește un singur argument, "file_path", reprezentând calea către fișierul de date.
process_data_and_plot <- function(file_path) {
# Citim datele din fișierul specificat într-un obiect de tip data frame numit "dataF".
dataF <- read.table(file = file_path, header = TRUE)
# Afișăm tabelul de date citit.
print(dataF)
# Transpunem datele din "dataF" folosind funcția "t" și le stocăm în "transposed_data".
transposed_data <- t(dataF)
# Generăm un grafic cu puncte (scatter plot) pentru datele transpuse folosind funcția "plot".
# Setăm "type = "p"" pentru a specifica tipul de grafic (cu puncte), iar "main" setează titlul graficului.
plot(transposed_data, type = "p", main = "Scatter Plot fisier data.txt")
# Adăugăm coordonatele deasupra fiecărui punct utilizând o buclă "for".
for (i in 1:nrow(transposed_data)) {
text(transposed_data[i, 1], transposed_data[i, 2], transposed_data[i,3l, abels = paste("(", transposed_data[i, 1], ",", transposed_data[i, 2], "," transposed_data[i, 3]")"))
# Definim o funcție numită "process_data_and_plot" care primește un singur argument, "file_path", reprezentând calea către fișierul de date.
process_data_and_plot <- function(file_path) {
# Citim datele din fișierul specificat într-un obiect de tip data frame numit "dataF".
dataF <- read.table(file = file_path, header = TRUE)
# Afișăm tabelul de date citit.
print(dataF)
# Transpunem datele din "dataF" folosind funcția "t" și le stocăm în "transposed_data".
transposed_data <- t(dataF)
# Generăm un grafic cu puncte (scatter plot) pentru datele transpuse folosind funcția "plot".
# Setăm "type = "p"" pentru a specifica tipul de grafic (cu puncte), iar "main" setează titlul graficului.
plot(transposed_data, type = "p", main = "Scatter Plot fisier data.txt")
# Adăugăm coordonatele deasupra fiecărui punct utilizând o buclă "for".
for (i in 1:nrow(transposed_data)) {
text(transposed_data[i, 1], transposed_data[i, 2], transposed_data[i,3l, abels = paste("(", transposed_data[i, 1], ",", transposed_data[i, 2], "," transposed_data[i, 3]")"))
# Definim o funcție numită "process_data_and_plot" care primește un singur argument, "file_path", reprezentând calea către fișierul de date.
process_data_and_plot <- function(file_path) {
# Citim datele din fișierul specificat într-un obiect de tip data frame numit "dataF".
dataF <- read.table(file = file_path, header = TRUE)
# Afișăm tabelul de date citit.
print(dataF)
# Transpunem datele din "dataF" folosind funcția "t" și le stocăm în "transposed_data".
transposed_data <- t(dataF)
# Generăm un grafic cu puncte (scatter plot) pentru datele transpuse folosind funcția "plot".
# Setăm "type = "p"" pentru a specifica tipul de grafic (cu puncte), iar "main" setează titlul graficului.
plot(transposed_data, type = "p", main = "Scatter Plot fisier data.txt")
# Adăugăm coordonatele deasupra fiecărui punct utilizând o buclă "for".
for (i in 1:nrow(transposed_data)) {
text(transposed_data[i, 1], transposed_data[i, 2], transposed_data[i,3l, abels = paste("(", transposed_data[i, 1], ",", transposed_data[i, 2], ",", transposed_data[i, 3]")"))
# Definim o funcție numită "process_data_and_plot" care primește un singur argument, "file_path", reprezentând calea către fișierul de date.
process_data_and_plot <- function(file_path) {
# Citim datele din fișierul specificat într-un obiect de tip data frame numit "dataF".
dataF <- read.table(file = file_path, header = TRUE)
# Afișăm tabelul de date citit.
print(dataF)
# Transpunem datele din "dataF" folosind funcția "t" și le stocăm în "transposed_data".
transposed_data <- t(dataF)
# Generăm un grafic cu puncte (scatter plot) pentru datele transpuse folosind funcția "plot".
# Setăm "type = "p"" pentru a specifica tipul de grafic (cu puncte), iar "main" setează titlul graficului.
plot(transposed_data, type = "p", main = "Scatter Plot fisier data.txt")
# Adăugăm coordonatele deasupra fiecărui punct utilizând o buclă "for".
for (i in 1:nrow(transposed_data)) {
text(transposed_data[i, 1], transposed_data[i, 2], transposed_data[i,3l, abels = paste("(", transposed_data[i, 1], ",", transposed_data[i, 2], ",", transposed_data[i, 3]")"))
# Definim o funcție numită "process_data_and_plot" care primește un singur argument, "file_path", reprezentând calea către fișierul de date.
process_data_and_plot <- function(file_path) {
# Citim datele din fișierul specificat într-un obiect de tip data frame numit "dataF".
dataF <- read.table(file = file_path, header = TRUE)
# Afișăm tabelul de date citit.
print(dataF)
# Transpunem datele din "dataF" folosind funcția "t" și le stocăm în "transposed_data".
transposed_data <- t(dataF)
# Generăm un grafic cu puncte (scatter plot) pentru datele transpuse folosind funcția "plot".
# Setăm "type = "p"" pentru a specifica tipul de grafic (cu puncte), iar "main" setează titlul graficului.
plot(transposed_data, type = "p", main = "Scatter Plot fisier data.txt")
# Adăugăm coordonatele deasupra fiecărui punct utilizând o buclă "for".
for (i in 1:nrow(transposed_data)) {
text(transposed_data[i, 1], transposed_data[i, 2], transposed_data[i,3l, abels = paste("(", transposed_data[i, 1], ",", transposed_data[i, 2], ",", transposed_data[i, 3]")"))
# Definim o funcție numită "process_data_and_plot" care primește un singur argument, "file_path", reprezentând calea către fișierul de date.
process_data_and_plot <- function(file_path) {
# Citim datele din fișierul specificat într-un obiect de tip data frame numit "dataF".
dataF <- read.table(file = file_path, header = TRUE)
# Afișăm tabelul de date citit.
print(dataF)
# Transpunem datele din "dataF" folosind funcția "t" și le stocăm în "transposed_data".
transposed_data <- t(dataF)
# Generăm un grafic cu puncte (scatter plot) pentru datele transpuse folosind funcția "plot".
# Setăm "type = "p"" pentru a specifica tipul de grafic (cu puncte), iar "main" setează titlul graficului.
plot(transposed_data, type = "p", main = "Scatter Plot fisier data.txt")
# Adăugăm coordonatele deasupra fiecărui punct utilizând o buclă "for".
for (i in 1:nrow(transposed_data)) {
text(transposed_data[i, 1], transposed_data[i, 2], transposed_data[i,3l, abels = paste("(", transposed_data[i, 1], ",", transposed_data[i, 2], ",", transposed_data[i, 3] , ")"))
# Definim o funcție numită "process_data_and_plot" care primește un singur argument, "file_path", reprezentând calea către fișierul de date.
process_data_and_plot <- function(file_path) {
# Citim datele din fișierul specificat într-un obiect de tip data frame numit "dataF".
dataF <- read.table(file = file_path, header = TRUE)
# Afișăm tabelul de date citit.
print(dataF)
# Transpunem datele din "dataF" folosind funcția "t" și le stocăm în "transposed_data".
transposed_data <- t(dataF)
# Generăm un grafic cu puncte (scatter plot) pentru datele transpuse folosind funcția "plot".
# Setăm "type = "p"" pentru a specifica tipul de grafic (cu puncte), iar "main" setează titlul graficului.
plot(transposed_data, type = "p", main = "Scatter Plot fisier data.txt")
# Adăugăm coordonatele deasupra fiecărui punct utilizând o buclă "for".
for (i in 1:nrow(transposed_data)) {
text(transposed_data[i, 1], transposed_data[i, 2], transposed_data[i,3l, abels = paste("(", transposed_data[i, 1], ",", transposed_data[i, 2], ",", transposed_data[i, 3] , ")"))
# Definim o funcție numită "process_data_and_plot" care primește un singur argument, "file_path", reprezentând calea către fișierul de date.
process_data_and_plot <- function(file_path) {
# Citim datele din fișierul specificat într-un obiect de tip data frame numit "dataF".
dataF <- read.table(file = file_path, header = TRUE)
# Afișăm tabelul de date citit.
print(dataF)
# Transpunem datele din "dataF" folosind funcția "t" și le stocăm în "transposed_data".
transposed_data <- t(dataF)
# Generăm un grafic cu puncte (scatter plot) pentru datele transpuse folosind funcția "plot".
# Setăm "type = "p"" pentru a specifica tipul de grafic (cu puncte), iar "main" setează titlul graficului.
plot(transposed_data, type = "p", main = "Scatter Plot fisier data.txt")
# Adăugăm coordonatele deasupra fiecărui punct utilizând o buclă "for".
for (i in 1:nrow(transposed_data)) {
text(transposed_data[i, 1], transposed_data[i, 2], transposed_data[i,3], labels = paste("(", transposed_data[i, 1], ",", transposed_data[i, 2], ",", transposed_data[i, 3] , ")"))
}
}
# Specificăm calea către fișierul de date pe care dorim să-l procesăm și să-l afișăm sub formă de grafic cu puncte și coordonate.
file_path <- "D:/UNIVER/ANUL_3/PD/LAB_1/PD_LAB_1/data.txt"
# Apelăm funcția "process_data_and_plot" cu calea către fișierul de date ca argument.
process_data_and_plot(file_path)
# Definim o funcție numită "process_data_and_plot" care primește un singur argument, "file_path", reprezentând calea către fișierul de date.
process_data_and_plot <- function(file_path) {
# Citim datele din fișierul specificat într-un obiect de tip data frame numit "dataF".
dataF <- read.table(file = file_path, header = TRUE)
# Afișăm tabelul de date citit.
print(dataF)
# Transpunem datele din "dataF" folosind funcția "t" și le stocăm în "transposed_data".
transposed_data <- t(dataF)
# Generăm un grafic cu puncte (scatter plot) pentru datele transpuse folosind funcția "plot".
# Setăm "type = "p"" pentru a specifica tipul de grafic (cu puncte), iar "main" setează titlul graficului.
plot(transposed_data, type = "p", main = "Scatter Plot fisier data.txt")
# Adăugăm coordonatele deasupra fiecărui punct utilizând o buclă "for".
for (i in 1:nrow(transposed_data)) {
text(transposed_data[i, 1], transposed_data[i, 2], transposed_data[i,3], labels = paste("(", transposed_data[i, 1], ",", transposed_data[i, 2], ",", transposed_data[i, 3] , ")"))
}
}
# Specificăm calea către fișierul de date pe care dorim să-l procesăm și să-l afișăm sub formă de grafic cu puncte și coordonate.
file_path <- "D:/UNIVER/ANUL_3/PD/LAB_1/PD_LAB_1/data.txt"
# Apelăm funcția "process_data_and_plot" cu calea către fișierul de date ca argument.
process_data_and_plot(file_path)
# Definim o funcție numită "process_data_and_plot" care primește un singur argument, "file_path", reprezentând calea către fișierul de date.
process_data_and_plot <- function(file_path) {
# Citim datele din fișierul specificat într-un obiect de tip data frame numit "dataF".
dataF <- read.table(file = file_path, header = TRUE)
# Afișăm tabelul de date citit.
print(dataF)
# Transpunem datele din "dataF" folosind funcția "t" și le stocăm în "transposed_data".
transposed_data <- t(dataF)
# Generăm un grafic cu puncte (scatter plot) pentru datele transpuse folosind funcția "plot".
# Setăm "type = "p"" pentru a specifica tipul de grafic (cu puncte), iar "main" setează titlul graficului.
plot(transposed_data, type = "p", main = "Scatter Plot fisier data.txt")
# Adăugăm coordonatele deasupra fiecărui punct utilizând o buclă "for".
for (i in 1:nrow(transposed_data)) {
text(transposed_data[i, 1], transposed_data[i, 2], transposed_data[i,3], labels = paste("(", transposed_data[i, 1], ",", transposed_data[i, 2], ",", transposed_data[i, 3] , ")"))
}
}
# Specificăm calea către fișierul de date pe care dorim să-l procesăm și să-l afișăm sub formă de grafic cu puncte și coordonate.
file_path <- "D:/UNIVER/ANUL_3/PD/LAB_1/PD_LAB_1/data.txt"
# Apelăm funcția "process_data_and_plot" cu calea către fișierul de date ca argument.
process_data_and_plot(file_path)
# Definiți o funcție numită "read_matrix_and_plot" care primește calea către fișierul de date ca argument.
read_matrix_and_plot <- function(file_path) {
# Citim datele din fișierul specificat într-o matrice numită "matrice_data".
matrice_data <- as.matrix(read.table(file = file_path, header = FALSE))
# Afișăm matricea de date citită.
print(matrice_data)
# Generăm un grafic pentru matricea de date folosind funcția "image".
image(matrice_data, main = "Grafic pentru matricea din fisier data.txt")
}
# Specificăm calea către fișierul de date "data.txt".
file_path <- "D:/UNIVER/ANUL_3/PD/LAB_1/PD_LAB_1/data.txt"
# Apelăm funcția "read_matrix_and_plot" cu calea către fișierul de date ca argument.
read_matrix_and_plot(file_path)
# Definim o funcție numită "read_and_plot_matrix" care primește calea către fișierul de date și numărul matricei ca argumente.
read_and_plot_matrix <- function(file_path, matrix_number) {
# Citim datele din fișierul specificat într-o matrice numită "data_matrix".
data_matrix <- as.matrix(read.table(file = file_path, header = FALSE))
# Afișăm matricea de date citită.
print(data_matrix)
# Verificăm dacă matricea specificată prin "matrix_number" există în fișier.
if (matrix_number > 0 && matrix_number <= ncol(data_matrix)) {
# Extragem matricea specificată din datele citite.
selected_matrix <- data_matrix[, matrix_number]
# Generăm un grafic pentru matricea specificată.
plot(selected_matrix, type = "l", main = paste("Grafic pentru Matricea", matrix_number), xlab = "Index", ylab = "Valoare")
} else {
cat("Matricea specificată nu există în fișierul dat.\n")
}
}
# Specificăm calea către fișierul de date "data.txt".
file_path <- "D:/UNIVER/ANUL_3/PD/LAB_1/PD_LAB_1/data.txt"
# Specificăm numărul matricei pe care dorim să o citim și să o afișăm sub formă de grafic (de exemplu, 1).
matrix_number <- 1
# Apelăm funcția "read_and_plot_matrix" cu calea către fișierul de date și numărul matricei ca argumente.
read_and_plot_matrix(file_path, matrix_number)
# Definim o funcție numită "process_data_and_plot" care primește un singur argument, "file_path", reprezentând calea către fișierul de date.
process_data_and_plot <- function(file_path) {
# Citim datele din fișierul specificat într-un obiect de tip data frame numit "dataF".
dataF <- read.table(file = file_path, header = TRUE)
# Afișăm tabelul de date citit.
print(dataF)
# Transpunem datele din "dataF" folosind funcția "t" și le stocăm în "transposed_data".
transposed_data <- t(dataF)
# Generăm un grafic cu puncte (scatter plot) pentru datele transpuse folosind funcția "plot".
# Setăm "type = "p"" pentru a specifica tipul de grafic (cu puncte), iar "main" setează titlul graficului.
plot(transposed_data, type = "p", main = "Scatter Plot fisier data.txt")
}
# Specificăm calea către fișierul de date pe care dorim să-l procesăm și să-l afișăm sub formă de grafic cu puncte.
file_path <- "D:/UNIVER/ANUL_3/PD/LAB_1/PD_LAB_1/data.txt"
# Apelăm funcția "process_data_and_plot" cu calea către fișierul de date ca argument.
process_data_and_plot(file_path)
# Definim o funcție numită "process_data_and_plot" care primește un singur argument, "file_path", reprezentând calea către fișierul de date.
process_data_and_plot <- function(file_path) {
# Citim datele din fișierul specificat într-un obiect de tip data frame numit "dataF".
dataF <- read.table(file = file_path, header = TRUE)
# Afișăm tabelul de date citit.
print(dataF)
# Transpunem datele din "dataF" folosind funcția "t" și le stocăm în "transposed_data".
transposed_data <- t(dataF)
# Generăm un grafic liniar pentru datele transpuse folosind funcția "matplot".
# "type = "l"" specifică tipul de grafic (liniar), iar "main" setează titlul graficului.
matplot(transposed_data, type = "l", main = "Plot fisier data.txt")
}
# Specificăm calea către fișierul de date pe care dorim să-l procesăm și să-l afișăm sub formă de grafic.
file_path <- "D:/UNIVER/ANUL_3/PD/LAB_1/PD_LAB_1/data.txt"
# Apelăm funcția "process_data_and_plot" cu calea către fișierul de date ca argument.
process_data_and_plot(file_path)
#ex3
#cream un vector cu datele de la 1 pana la 10
vector=1:10
print(vector)
#cream o matrice pe care o impartim in 2 coloane
#datele le luam din cadrul vectorului
matrice1=matrix(vector, ncol=2)
print(matrice1)
#cream o matrice pe care o impartim in 2 randuri
#datele introduse sunt de la 1 pana la 10
matrice2=matrix(1:10,nrow=2,byrow=T)
print(matrice2)
#cream o matrice in care pe fiecare rand introducem datele de la 1 pana la 4
m=matrix(1:4,nrow=4,ncol=4)
print(m)
#ex4
# Afișăm un mesaj care indică numărul de rânduri ale matricei1
print(paste("Matrice1 nr randuri -> ", nrow(matrice1)))
# Folosim funcția "dim" pentru a obține dimensiunile matricei1
dim(matrice1)
# Folosim funcția "ncol" pentru a obține numărul de coloane al matricei1
ncol(matrice1)
# Folosim funcția "nrow" pentru a obține numărul de rânduri al matricei1
nrow(matrice1)
# Înmulțim matrice1 cu matrice2 folosind operatorul "%*%" și salvăm rezultatul în variabila "rezultat"
resultat = matrice1 %*% matrice2
print(resultat)
# Afișăm transpusa matricei1 folosind funcția "t"
print(t(matrice1))
# Afișăm diagonala matricei "resultat" utilizând funcția "diag"
print(diag(resultat))
# Afișăm o matrice diagonală cu valorile specificate (3, 2, 4)
print(diag(c(3, 2, 4)))
# Definim doi vectori "vector1" și "vector2"
vector1 <- c(8, 4, 5)
vector2 <- c(3, 4, 2)
# Folosim funcția "rbind" pentru a combina cei doi vectori într-o matrice
res = rbind(vector1, vector2)
print(res)
# Definim un al treilea vector "vector3"
vector3 <- c(9, 3)
# Folosim funcția "cbind" pentru a adăuga "vector3" la matricea "res"
print(cbind(res, vector3))
# Calculăm valorile proprii ale matricei "m" folosind funcția "eigen" și le afișăm
print(eigen(m))
#ex5
#printeaza primul rand al matricii resultat
print(resultat[1,])
#printeaza matricea resultat in care randdul 2 e copiat in 1
print(resultat[, c(2,2,1)])
#elimina primul rand din matricea resultat
print(resultat[-1,])
#printeaza elementele mai mari ca 51
print(resultat[resultat>51])
#printeaza o matrice creata din vector
print(matrix(vector,nrow=2))
#printeaza o matrice creata din vector conform paramaterului byRow care e true
print(matrix(vector,nrow=2, byrow=T))
#ex6
#Crearea matricei Y
Y <- matrix(c(1, 2, 3, 5, 10, 12, 13, 22, 5, 9, 8, 34, 7, 1, 4, 3), nrow = 4, byrow = TRUE)
print(Y)
#Accesarea elementului din al treilea rând și a doua coloană
element <- Y[3, 2]
print(element)
#Accesarea întregului al doilea rând
rand_doi <- Y[2, ]
print(rand_doi)
#Accesarea întregii a patra coloane
coloana_patru <- Y[, 4]
print(coloana_patru)
#Eliminarea primului rand si celei de a doua coloana
matrice_noua <- Y[-1, -2]
print(matrice_noua)
#Exportarea matricea Y într-un fișier .txt folosind următorul cod
write.table(Y, "D:/UNIVER/ANUL_3/PD/LAB_1/PD_LAB_1/data.txt", sep = "\t", row.names = FALSE, col.names = FALSE)
# Definim o funcție numită "process_data_and_plot" care primește un singur argument, "file_path", reprezentând calea către fișierul de date.
process_data_and_plot <- function(file_path) {
# Citim datele din fișierul specificat într-un obiect de tip data frame numit "dataF".
dataF <- read.table(file = file_path, header = TRUE)
# Afișăm tabelul de date citit.
print(dataF)
# Transpunem datele din "dataF" folosind funcția "t" și le stocăm în "transposed_data".
transposed_data <- t(dataF)
# Generăm un grafic liniar pentru datele transpuse folosind funcția "matplot".
# "type = "l"" specifică tipul de grafic (liniar), iar "main" setează titlul graficului.
matplot(transposed_data, type = "l", main = "Plot fisier data.txt")
}
# Specificăm calea către fișierul de date pe care dorim să-l procesăm și să-l afișăm sub formă de grafic.
file_path <- "D:/UNIVER/ANUL_3/PD/LAB_1/PD_LAB_1/data.txt"
# Apelăm funcția "process_data_and_plot" cu calea către fișierul de date ca argument.
process_data_and_plot(file_path)
airquality <- datasets::airquality
#Ozone: Concentrația de ozon în aer (în unități Dobson).
#Solar.R: Radiația solară (în langleys).
#Wind: Viteza vântului (în mile pe oră).
#Temp: Temperatura (în grade Fahrenheit).
#Month: Luna (1-12).
#Day: Ziua (1-31).
summary(airquality)
media_temp <- mean(airquality$Temp)
mediana_temp <- median(airquality$Temp)
deviatia_std_temp <- sd(airquality$Temp)
print(paste("Media Temp: ", media_temp))
print(paste("Mediana Temp: ", mediana_temp))
print(paste("Deviatia Standard Temp: ", deviatia_std_temp))
varianța_temp <- var(airquality$Temp)
deviatia_std_custom <- function(x) sqrt(var(x))
print(paste("Varianța Temp: ", varianța_temp))
print(paste("Deviatia Standard (utilizând funcția personalizată): ", deviatia_std_custom(airquality$Temp)))
a_doua_linie <- airquality[2, ]
print(a_doua_linie)
a_treia_coloana <- airquality[, 3]
print(a_treia_coloana)
liniile_124 <- airquality[c(1, 2, 4), ]
print(liniile_124)
liniile_26 <- airquality[2:6, ]
print(liniile_26)
toate_exceptie_12 <- airquality[, -c(1, 2)]
print(toate_exceptie_12)
toate_liniile_temp_mai_mare_de_90 <- airquality[airquality$Temp > 90, ]
print(toate_liniile_temp_mai_mare_de_90)
liniile_124 <- airquality[c(1, 2, 4)]
print(liniile_124)
liniile_26 <- airquality[2:6]
print(liniile_26)
airquality <- datasets::airquality
#Ozone: Concentrația de ozon în aer (în unități Dobson).
#Solar.R: Radiația solară (în langleys).
#Wind: Viteza vântului (în mile pe oră).
#Temp: Temperatura (în grade Fahrenheit).
#Month: Luna (1-12).
#Day: Ziua (1-31).
summary(airquality)
media_temp <- mean(airquality$Temp)
mediana_temp <- median(airquality$Temp)
deviatia_std_temp <- sd(airquality$Temp)
print(paste("Media Temp: ", media_temp))
print(paste("Mediana Temp: ", mediana_temp))
print(paste("Deviatia Standard Temp: ", deviatia_std_temp))
varianța_temp <- var(airquality$Temp)
deviatia_std_custom <- function(x) sqrt(var(x))
print(paste("Varianța Temp: ", varianța_temp))
print(paste("Deviatia Standard (utilizând funcția personalizată): ", deviatia_std_custom(airquality$Temp)))
a_doua_linie <- airquality[2, ]
print(a_doua_linie)
a_treia_coloana <- airquality[, 3]
print(a_treia_coloana)
liniile_124 <- airquality[c(1, 2, 4), ]
print(liniile_124)
liniile_26 <- airquality[2:6, ]
print(liniile_26)
toate_exceptie_12 <- airquality[, -c(1, 2)]
print(toate_exceptie_12)
toate_liniile_temp_mai_mare_de_90 <- airquality[airquality$Temp > 90, ]
print(toate_liniile_temp_mai_mare_de_90)
# Folosim funcția "rbind" pentru a combina cei doi vectori într-o matrice
res = rbind(vector1, vector2)
print(res)
print(cbind(res, vector3))
Y <- matrix(c(1, 2, 3, 5, 10, 12, 13, 22, 5, 9, 8, 34, 7, 1, 4, 3), nrow = 4, byrow = TRUE)
print(Y)
Y <- matrix(c(1, 2, 3, 5, 10, 12, 13, 22, 5, 9, 8, 34, 7, 1, 4, 3), nrow = 4, byrow = FALSE)
print(Y)
#printeaza tabelul modificand indexul 1,2 si 3 conform indexului indicat dupa care printeaza toat elementele pana la pozitia 7
print(x[c(2,2,5 :7)])
#printeaza elementele incepand de la 2 pana la 4 urmate de cele de la 9 pana la 13
x<-c(2:4,9:13)
print(x)
#printteaza caracterele din ""
y<-c("b", "c", "E")
print(y)
#printeaza elementul cu nr 5 din tabelul x
print(x[5])
#printeaza elementele de la indexul 2 pana la 3 din y
print(y[2:3])
#inlocuieste cele 3 elemente din variabila y conform indexului selectat
print(y[c(2,2,3)])
#printeaza elementul cu nr 5 din tabelul x
print(x[50])
#elimina elementul de la indexul indicat
print(x[-5])
#printeaza indexul 4 din tabelul x
print(x[3])
#printeaza tabelul modificand indexul 1,2 si 3 conform indexului indicat dupa care printeaza toat elementele pana la pozitia 7
print(x[c(2,2,5 :7)])
#printeaza elementele in descrestere de la pozitia 6 pana la 1
print(x[6 :1])
#elimina elementele de la pozitia 1 pana la 4
print(x[-(1 : 4)])
#elimina elementele de pe pozitia 1 si 4
print(x[-c(1 , 4)])
